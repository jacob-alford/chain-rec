import { paramCase as kebabCase } from 'change-case'
import { pipe } from 'fp-ts/function'
import * as O from 'fp-ts/Option'
import * as TE from 'fp-ts/TaskEither'
import path from 'path'

import { type Build } from './build'
import { autogeneratedDocs } from './docs-config'

const removeExt = (file: string): string => file.replace(/\.([^/.].*)?[^/.]+$/, '')

const rewriteParent =
  (replacement: O.Option<string>, extras?: string) =>
  (fileContents: string): string =>
    fileContents.replace(
      /parent: Modules\n---/g,
      pipe(
        replacement,
        O.fold(
          () => `${extras ?? ''}\n---`,
          r => `${extras ?? ''}parent: ${r}\n---`,
        ),
      ),
    )

export const docsPack: Build<void> = _ =>
  pipe(
    TE.Do,
    TE.let('docs', () => autogeneratedDocs),
    TE.chainFirst(({ docs }) =>
      pipe(
        docs,
        TE.traverseArray(file =>
          pipe(
            _.readFile(path.resolve('./docs/modules', `${file}.md`)),
            TE.map(rewriteParent(O.none, `permalink: /${kebabCase(removeExt(file))}/`)),
            TE.chain(contents =>
              _.writeFile(path.resolve(`./docs`, `${removeExt(file)}.md`), contents),
            ),
          ),
        ),
      ),
    ),
    TE.asUnit,
  )
