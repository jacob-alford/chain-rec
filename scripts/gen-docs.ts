import { pipe } from 'fp-ts/function'
import * as RA from 'fp-ts/ReadonlyArray'
import * as TE from 'fp-ts/TaskEither'
import path from 'path'

import { type Build } from './build'
import { autogeneratedDocs as autogenDocs, TEMP_DIR } from './docs-config'

const makeDocs: (file: string) => readonly [string, string] = file => [
  `./src/${file}`,
  path.join(TEMP_DIR, file),
]

const autogeneratedDocs: ReadonlyArray<readonly [string, string]> = pipe(
  autogenDocs,
  RA.map(makeDocs),
)

export const genDocs: Build<void> = _ =>
  pipe(
    TE.Do,
    TE.chainFirst(() => _.upsertDir(path.resolve(TEMP_DIR))),
    TE.chainFirst(() =>
      pipe(
        autogeneratedDocs,
        TE.traverseArray(([relFile, relTarg]) =>
          _.copyFile(path.resolve(relFile), path.resolve(relTarg)),
        ),
      ),
    ),
    TE.chainFirst(() => _.exec('yarn docs')),
    TE.chainFirst(() =>
      pipe(
        _.readFile(path.resolve('./README.md')),
        TE.chain(file =>
          _.writeFile(
            path.resolve('./docs/index.md'),
            `---
title: Home
permalink: /
has_children: false
nav_order: 0
---\n\n${file}`,
          ),
        ),
      ),
    ),
    TE.asUnit,
  )
